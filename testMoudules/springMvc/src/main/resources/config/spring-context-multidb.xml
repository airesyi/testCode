<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd"
>


    <!-- 加载数据库配置文件 -->
    <context:property-placeholder location="classpath:configValue/jdbc.properties" ignore-unresolvable="true"/>
    <!-- 配置数据源 -->
    <!-- 数据库连接池 -->
    <bean id="parentDataSource" class="com.alibaba.druid.pool.DruidDataSource"
          destroy-method="close" abstract="true" init-method="init">
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${jdbc.pool.init}"/>
        <property name="minIdle" value="${jdbc.pool.minIdle}"/>
        <property name="maxActive" value="${jdbc.pool.maxActive}"/>

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000"/>

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000"/>

        <property name="validationQuery" value="${jdbc.testSql}"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小（Oracle使用）
        <property name="poolPreparedStatements" value="true" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20" /> -->

        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="stat"/>
    </bean>

    <bean id="masterDataSource1" parent="parentDataSource">
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="driverClassName" value="${jdbc.driver}"/>
    </bean>

    <bean id="slaveDataSource1" parent="parentDataSource">
        <property name="url" value="${jdbc.url.slave}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="driverClassName" value="${jdbc.driver}"/>
    </bean>

    <bean id="slaveDataSource2" parent="parentDataSource">
        <property name="url" value="${jdbc.url.slave}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="driverClassName" value="${jdbc.driver}"/>
    </bean>
    <!--
        <bean id="dataSource" class="com.mvc.multidb.RouteDataSource">
            <property name="targetDataSources">

                <map key-type="java.lang.String">
                    &lt;!&ndash;写库&ndash;&gt;
                    <entry key="MASTER" value-ref="masterDataSource"/>
                    &lt;!&ndash;读库&ndash;&gt;
                    <entry key="SLAVE" value-ref="slaveDataSource"/>
                </map>
            </property>
            <property name="defaultTargetDataSource" ref="masterDataSource1"></property>
        </bean>
    -->
    <bean id="dataSource" class="com.mvc.multidb.RouteDataSource">
        <property name="targetDataSources">

            <map key-type="java.lang.String">
                <!--写库-->
                <entry key="MASTER" value-ref="masterDataSource1"/>
                <!--读库-->
                <entry key="SLAVE" value-ref="slaveDataSource1"/>
            </map>
        </property>
        <property name="defaultTargetDataSource" ref="masterDataSource1"></property>
    </bean>

    <!-- 配置SqlSessionFactory  -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 配置数据源 -->
        <property name="dataSource" ref="dataSource"></property>
        <!-- 配置MyBatis路径 -->
        <property name="typeAliasesPackage" value="com.mvc.modules"></property>
        <!--修改成mapper.xml映射文件位置-->
        <property name="mapperLocations" value="classpath*:mapper/*Mapper.xml"></property>
        <property name="plugins">
            <list>
                <bean class="com.mvc.multidb.RouteDataSourcePlugin"></bean>
            </list>
        </property>
    </bean>

    <!-- Mapper文件扫描器,DAO接口所在包名，Spring会自动查找其下的类 -->
    <bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.mvc.dao"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
    </bean>

    <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 开启注解事务 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>

</beans>